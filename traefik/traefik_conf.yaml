
api:
  dashboard: true

entryPoints:
  web:
    address: ":80"
  websecure:
    address: ":443"

providers:
  docker:
    endpoint: "unix:///var/run/docker.sock"
    exposedByDefault: false

certificatesResolvers:
  myresolver:
    acme:
      email: your-email@example.com
      storage: "/letsencrypt/acme.json"
      httpChallenge:
        entryPoint: web

middlewares:
  ipwhitelist:
    ipWhiteList:
      sourceRange: ["your_allowed_ip_1", "your_allowed_ip_2", "your_allowed_network_range"]
  redirect-to-login-user:
    redirectRegex:
      regex: "^https?://(www\\.)?example\\.com/user/(update|profile|settings|other-protected-path)"
      replacement: "https://www.example.com/login"
      permanent: false

  redirect-to-login-payment:
    redirectRegex:
      regex: "^https?://(www\\.)?example\\.com/payment"
      replacement: "https://www.example.com/login"
      permanent: false
  
  # redirect-to-login:
  #   redirectRegex:
  #     regex: "^https?://(www\\.)?example\\.com/(payment|user/(update|profile|settings|other-protected-path))"
  #     replacement: "https://www.example.com/login"
  #     permanent: false

routers:
  # Auth service router
  auth:
    rule: "Host(`authservice`) && PathPrefix(`/login`)"
    service: auth
    entryPoints:
      - websecure
    tls:
      certResolver: myresolver

  # User service router (Public routes)
  user:
    rule: "Host(`userservice`) && PathPrefix(`/user`)"
    service: user
    entryPoints:
      - websecure
    tls:
      certResolver: myresolver

  user-protected:
    rule: "Host(`www.example.com`) && (PathPrefix(`/user/update`) || PathPrefix(`/user/profile`) || PathPrefix(`/user/settings`) || PathPrefix(`/user/other-protected-path`))"
    service: user_service
    middlewares:
      - redirect-to-login-user
    entryPoints:
      - websecure
    tls:
      certResolver: myresolver

  # Order service router (Public routes)
  # order:
  #   rule: "Host(`www.example.com`) && PathPrefix(`/order`)"
  #   service: order_service
  #   entryPoints:
  #     - websecure
  #   tls:
  #     certResolver: myresolver

  # # Payment service router (Requires authentication)
  # payment:
  #   rule: "Host(`www.example.com`) && PathPrefix(`/payment`)"
  #   service: payment_service
  #   middlewares:
  #     - redirect-to-login
  #   entryPoints:
  #     - websecure
  #   tls:
  #     certResolver: myresolver

  # Internal services
  rabbitmq:
    rule: "Host(`rabbitmq`)"
    service: rabbitmq
    middlewares:
      - ipwhitelist
    entryPoints:
      - websecure
    tls:
      certResolver: myresolver

  prometheus:
    rule: "Host(`prometheus`) && PathPrefix(`/metrics`)" # prometheus.internal
    service: prometheus_service
    middlewares:
      - ipwhitelist
    entryPoints:
      - websecure
    tls:
      certResolver: myresolver

  grafana:
    rule: "Host(`grafana`) && PathPrefix(`/api/prometheus/scrape`)"
    service: grafana
    middlewares:
      - ipwhitelist
    entryPoints:
      - websecure
    tls:
      certResolver: myresolver

  cadvisor:
    rule: "Host(`cadvisor`)"
    service: cadvisor
    middlewares:
      - ipwhitelist
    entryPoints:
      - websecure
    tls:
      certResolver: myresolver

  alertmanager:
    rule: "Host(`alertmanager`)" # alertmanager.internal
    service: alertmanager
    middlewares:
      - ipwhitelist
    entryPoints:
      - websecure
    tls:
      certResolver: myresolver

services:
  auth:
    loadBalancer:
      servers:
        - url: "http://authservice:8001"

  user:
    loadBalancer:
      servers:
        - url: "http://userservice:8000"

  order_service:
    loadBalancer:
      servers:
        - url: "http://orderservice:8002"

  payment_service:
    loadBalancer:
      servers:
        - url: "http://paymentservice:8003"

  rabbitmq:
    loadBalancer:
      servers:
        - url: "http://rabbitmq:15672"

  prometheus:
    loadBalancer:
      servers:
        - url: "http://prometheus:9090"

  grafana:
    loadBalancer:
      servers:
        - url: "http://grafana:3000"

  cadvisor:
    loadBalancer:
      servers:
        - url: "http://cadvisor:8080"

  alertmanager:
    loadBalancer:
      servers:
        - url: "http://alertmanager:9093"

# middlewares:
#   jwt-auth:
#     jwt:
#       issuer: "https://issuer.example.com"
#       header: "Authorization"
#       payload: "{\"iss\":\"https://auth.example.com\",\"exp\":3600}"

###
# Traefik configuration
# entryPoints:
#   web:
#     address: ":80"
#   websecure:
#     address: ":443"

# http:
#   routers:
#     service1-router:
#       rule: "Host(`service1.example.com`)"
#       service: "service1"
#       middlewares:
#         - "authMiddleware"
#       tls: {}
#     service2-router:
#       rule: "Host(`service2.example.com`)"
#       service: "service2"
#       middlewares:
#         - "authMiddleware"
#       tls: {}

#   middlewares:
#     authMiddleware:
#       rbac:
#         policies:
#           role1:
#             policy: "deny"
#             principals:
#               users: ["user1"]
#             resources:
#               services: ["service1"]
#               methods: ["GET"]
#           role2:
#             policy: "allow"
#             principals:
#               users: ["user2"]
#             resources:
#               services: ["service2"]
#               methods: ["GET"]