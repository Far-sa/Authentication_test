api:
  dashboard: true

entryPoints:
  web:
    address: ":80"
  websecure:
    address: ":443"

providers:
  docker:
    endpoint: "unix:///var/run/docker.sock"
    exposedByDefault: false

certificatesResolvers:
  myresolver:
    acme:
      email: your-email@example.com
      storage: "/letsencrypt/acme.json"
      httpChallenge:
        entryPoint: web

middlewares:
  # Define an IP whitelist middleware
  ipwhitelist:
    # Replace with allowed IP addresses
    srcRange: ["your_allowed_ip_1", "your_allowed_ip_2","your_allowed_network_range"]
    # Define your custom middleware
  basic_auth:
    path: "/path/to/basic_auth_middleware"

  # Custom middleware for rate limiting
  rate_limit:
    path: "/path/to/rate_limit_middleware"

  # ... other middleware definitions

router:
  # Define routers for your microservices
  rules:
    - service: authservice
      path: /login  # Match only the "/login" path
      match: Host(`authservice`)
      tls: { certResolver: myresolver }

    - service: userservice
      path: /register  # Match only "/register" path
      match: Host(`userservice`)
      tls: { certResolver: myresolver }

    - service: rabbitmq
      middlewares:
        - ipwhitelist  # Only allow access from whitelisted IP
      match: Host(`rabbitmq`)
      tls: { certResolver: myresolver }

    - service: prometheus
      path: /metrics
      middlewares:
        - internal_auth  # (optional) for additional security within the network
      match: Host(`prometheus`)
      tls: { certResolver: myresolver }

    - service: grafana
      path: /api/prometheus/scrape
      match: Host(`grafana`)
      tls: { certResolver: myresolver }

    - service: cadvisor
      match: Host(`cadvisor`)
      tls: { certResolver: myresolver }
      
    - service: alertmanager
      match: Host(`alertmanager`)
      tls: { certResolver: myresolver }

# Internal Routing:
services:
  auth:
    loadBalancer:
      servers:
        - address: "http://authservice:8001"
  user:
    loadBalancer:
      servers:
        - address: "http://userservice:8000"
  rabbitmq:
    loadBalancer:
      servers:
        - address: "http://rabbitmq:15672"
  prometheus:
    loadBalancer:
      servers:
        - address: "http://prometheus:9090"
  grafana:
    loadBalancer:
      servers:
        - address: "http://grafana:3000"
  cadvisor:
    loadBalancer:
      servers:
        - address: "http://cadvisor:8080"
  alertmanager:
    loadBalancer:
      servers:
        - address: "http://alertmanager:9093"
