apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-service
  namespace: microservices
spec:
  replicas: 2
  selector:
    matchLabels:
      app: auth-service
  template:
    metadata:
      labels:
        app: auth-service
    spec:
       # Init containers to wait for dependencies
      # initContainers:
      # - name: wait-for-database
      #   image: busybox:latest
      #   command: ["sh", "-c"]
      #   args: ["while ! nc -z database 5432; do sleep 3; done; exit 0"]
      # - name: wait-for-rabbitmq
      #   image: busybox:latest
      #   command: ["sh", "-c"]
      #   args: ["while ! nc -z rabbitmq 5672; do sleep 3; done; exit 0"]

      containers:
        - name: auth-service
          image: auth-service:2.0.0
          imagePullPolicy: Never
          ports:
            - containerPort: 5001
          # readinessProbe:
          #   httpGet:
          #     path: /health
          #     port: 15672
          #   initialDelaySeconds: 15
          #   periodSeconds: 10
          #   failureThreshold: 3

          env:
            - name: RABBITMQ_HOST
              value: "rabbitmq-service"
            - name: RABBITMQ_PORT
              value: "5672"
            - name: RABBITMQ_USERNAME
              valueFrom:
                secretKeyRef:
                  name: rabbitmq-credentials
                  key: username
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: rabbitmq-credentials
                  key: password

            - name: DATABASE_HOST
              value: "postgres-service"
            - name: DATABASE_PORT
              value: "5432"
            - name: DATABASE_NAME
              value: "authDB"
            - name: DATABASE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: database-credentials
                  key: username
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: database-credentials
                  key: password
            # Other non-sensitive environment variables

          volumeMounts:
            - name: rabbitmq-secret
              mountPath: "/etc/rabbitmq"
              readOnly: true
            - name: database-secret
              mountPath: "/etc/database"
              readOnly: true

      volumes:
        - name: rabbitmq-secret
          secret:
            secretName: rabbitmq-credentials
        - name: database-secret
          secret:
            secretName: database-credentials

      # Resource requests and limits (add based on usage)

      # Liveness and readiness probes (uncomment and define as needed)
      # livenessProbe:
      #   httpGet:
      #     path: /healthz
      #     port: 5001
      #   initialDelaySeconds: 15
      #   periodSeconds: 20
      # readinessProbe:
      #   httpGet:
      #     path: /readyz
      #     port: 5001
      #   initialDelaySeconds: 15
      #   periodSeconds: 20
