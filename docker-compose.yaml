services:
  traefik:
    image: traefik:v2.5
    container_name: reverse-proxy
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--configfile=/etc/traefik/traefik_conf.yaml"  # Specify the custom config file path
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.myresolver.acme.email=your-email@example.com"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "8090:80"
      - "443:443"
      - "8080:8080"  # Expose Traefik dashboard
    networks:
      - traefik-network
      - auth-network
      - user-network
      - monitoring
      - rabbitmq-network
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./letsencrypt:/letsencrypt
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml

    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik`)"

  rabbitmq:
    image: rabbitmq:3.9-management
    container_name: rabbitmq
    hostname: rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"] # Checks rabbitmq status
      interval: 10s # Check every 10 seconds
      timeout: 5s # Wait for 5 seconds for response
      retries: 5 # Retry up to 5 times before considering unhealthy
    ports:
      - "5672:5672" # RabbitMQ default port
      - "15672:15672" # RabbitMQ management plugin
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
      # RABBITMQ_DEFAULT_VHOST: /
    volumes:
      - ./data/rabbitmq-data:/var/lib/rabbitmq
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.rabbitmq.rule=Host(`rabbitmq`)" # rabbitmq.example.com
      - "traefik.http.services.rabbitmq.loadbalancer.server.port=15672"
    networks:
      - rabbitmq-network
      # - auth-network
      # - user-network

  postgres:
    image: postgres:12-alpine
    container_name: postgres
    hostname: postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      #POSTGRES_DB: postgres
      #POSTGRES_HOST: postgres
    ports:
      - "5432:5432"
    volumes:
      - ./data/pgdata:/var/lib/postgresql/data
      - ./authService/scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - auth-network

    # Postgres Exporter for DB1
  # postgres_exporter_db1:
  #   image: wrouesnel/postgres_exporter
  #   container_name: postgres_exporter_db1
  #   environment:
  #     DATA_SOURCE_NAME: "postgresql://youruser:yourpassword@db1:5432/yourdb1?sslmode=disable"
  #   ports:
  #     - "9187:9187"
  #   networks:
  #     - microservices-network

  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: always
    ports:
      - "3306:3306" # MySQL default port
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: mysqlUser
      #MYSQL_USER: root
      MYSQL_PASSWORD: password
    volumes:
      - ./data/mysql-data:/var/lib/mysql
      - ./userService/scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - user-network

    # MySQL Exporter for DB2
  # mysql_exporter_db2:
  #   image: prom/mysqld-exporter
  #   container_name: mysql_exporter_db2
  #   environment:
  #     DATA_SOURCE_NAME: "youruser:yourpassword@tcp(db2:3306)/yourdb2"
  #   ports:
  #     - "9104:9104"
  #   networks:
  #     - microservices-network

  authservice:
    build:
      context: ./authService
      dockerfile: Dockerfile
    image: auth-service:2.0.0
    container_name: auth-svc
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: guest
      RABBITMQ_PASSWORD: guest
      RABBITMQ_PORT: 5672
      #AMQP_URL: 'amqp://rabbitmq?connection_attempts=5&retry_delay=5'
      ###
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: authDB
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    # volumes:
    #   - ./authService/scripts/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh:ro
    depends_on:
      - rabbitmq
      - postgres
    ports:
      - 8001:5001
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.authService.rule=Host(`authservice`)" # auth.example.com
      - "traefik.http.services.authService.loadbalancer.server.port=8001"
    networks:
      - auth-network
      - rabbitmq-network
      - monitoring

  userservice:
    build:
      context: ./userService
      dockerfile: Dockerfile
    image: user-service:2.0.0
    container_name: user-svc

    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: guest
      RABBITMQ_PASSWORD: guest
      RABBITMQ_PORT: 5672
      ##
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      MYSQL_DB: mysqlUser
      MYSQL_USER: root
      MYSQL_PASSWORD: password
      ##
      # APP_CONFIG_PATH: /app/user-svc/config.yaml  # Pointing to the mounted config file
    depends_on:
      - rabbitmq
      - mysql
    ports:
      - 8000:5000
    restart: always
    networks:
      - user-network
      - rabbitmq-network
      - monitoring
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.userService.rule=Host(`userservice`)" # user.example.com
      - "traefik.http.services.userService.loadbalancer.server.port=8000"

  prometheus:
    image: prom/prometheus
    restart: always
    volumes:
      - ./data/metrics/prometheus:/etc/prometheus/
      - ./prometheus-grafana/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
    ports:
      - 9090:9090
    links:
      - cadvisor:cadvisor
      - alertmanager:alertmanager
    depends_on:
      - cadvisor
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus`)" # prometheus.example.com
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
    networks:
      - monitoring

  node-exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - 9100:9100
    restart: always
    deploy:
      mode: global
    networks:
      - monitoring

  alertmanager:
    image: prom/alertmanager
    restart: always
    ports:
      - 9093:9093
    volumes:
      - ./data/metrics/alertmanager/:/etc/alertmanager/
      - ./prometheus-grafana/alertmanager/config.yml:/etc/alertmanager/config.yml
    command:
      - "--config.file=/etc/alertmanager/config.yml"
      - "--storage.path=/alertmanager"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.alertmanager.rule=Host(`alertmanager`)" # alertmanager.example.com
      - "traefik.http.services.alertmanager.loadbalancer.server.port=9093"
    networks:
      - monitoring

  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - 8080:8080
    restart: always
    deploy:
      mode: global
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.cadvisor.rule=Host(`cadvisor`)" # cadvisor.example.com
      - "traefik.http.services.cadvisor.loadbalancer.server.port=8080"
    networks:
      - monitoring

  grafana:
    image: grafana/grafana
    user: "472"
    restart: always
    environment:
      GF_INSTALL_PLUGINS: "grafana-clock-panel,grafana-simple-json-datasource"
    volumes:
      #- grafana_data:/var/lib/grafana
      - ./data/metrics/grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./prometheus-grafana/grafana/config.monitoring
    ports:
      - 3000:3000
    depends_on:
      - prometheus
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana`)" # grafana.example.com
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
    networks:
      - monitoring

networks:
  traefik-network:
    external: true
    driver: bridge
  auth-network:
    external: true
    driver: bridge
  user-network:
    external: true
    driver: bridge
  rabbitmq-network:
    external: true
    driver: bridge
  monitoring:
    external: true
    driver: bridge

# volumes:
#   prometheus_data: {}
#   grafana_data: {}

#  networks:
#   traefik-network:
#     driver: bridge
#   userService-network:
#     driver: bridge
#   authService-network:
#     driver: bridge
