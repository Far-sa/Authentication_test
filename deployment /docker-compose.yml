# version: '3.8'

# services:
#   # Traefik service
#   traefik:
#     image: traefik:v2.5
#     command:
#       - "--api.insecure=true"  # Enable insecure API dashboard (for demo purposes)
#       - "--providers.docker=true"
#       - "--entrypoints.web.address=:80"
#       - "--providers.docker.exposedbydefault=false"
#       - "--configFile=/etc/traefik/traefik.yaml"  # Specify the path to the Traefik configuration file
#       - "--providers.file.filename=/etc/traefik/dynamic_conf.yaml"  # Dynamic configuration file
#       - "--log.level=INFO"  # Log level

#     ports:
#       - "80:80"  # Expose port 80 for HTTP traffic
#       - "8080:8080"  # Expose port 8080 for Traefik API dashboard
#     volumes:
#       - ./traefik:/etc/traefik  # Mount Traefik configuration
#       - "./traefik.yaml:/etc/traefik/traefik.yaml"  # Mount the Traefik configuration file
#       - "/var/run/docker.sock:/var/run/docker.sock:ro"


#     networks:
#       - my_network  # Attach to custom network

# # networks:
# #   traefik-net:
# #     external: true

#   # Example Go service
#   user-service:
#     build:
#       context: ./user-service
#     ports:
#       - "8081:8081"  # Expose port 8081 for user service
#     networks:
#       - my_network  # Attach to custom network
#     labels:
#       - "traefik.enable=true"  # Enable Traefik routing
#       - "traefik.http.routers.user-service.rule=Host(`user-service.example.com`)"  # Routing rule for user service
#       - "traefik.http.middlewares.jwt-auth.forwardauth.address=http://localhost:5001/auth"

#       - "traefik.http.routers.user-service.rule=Host(`user.example.com`) && Path(`/login`)"
#       - "traefik.http.routers.user-service.middlewares=auth"
#       - "traefik.http.middlewares.auth.jwt=true"
#       - "traefik.http.middlewares.auth.jwt.header=Authorization"
#       #- "traefik.http.middlewares.auth.jwt.payload={"iss":"https://issuer.example.com","aud":["user-service"]}"

#       # - "traefik.http.routers.user-service.rule=Host(`user.example.com`) && Path(`/login`)"
#       # - "traefik.http.routers.user-service.middlewares=auth"
#       # - "traefik.http.middlewares.auth.jwt=true"
#       # - "traefik.http.middlewares.auth.jwt.issuer=https://oauth2.example.com"
#       # - "traefik.http.middlewares.auth.jwt.audience=user-service"


#   # Example Go service
#   auth-service:
#     build:
#       context: ./auth-service
#     ports:
#       - "8082:8082"  # Expose port 8082 for order service
#     networks:
#       - my_network  # Attach to custom network
#     labels:
#       - "traefik.enable=true"  # Enable Traefik routing
#       - "traefik.http.routers.order-service.rule=Host(`order-service.example.com`)" 
#       - "traefik.http.middlewares.jwt-auth.forwardauth.address=http://auth-service:8080/auth"
#  # Routing rule for order service


#   # Swagger UI service
#   swagger-ui:
#     image: swaggerapi/swagger-ui
#     ports:
#       - "8080:8080"
#     volumes:
#       - ./openapi.yaml:/usr/share/nginx/html/openapi.yaml

# volumes:
#   pg_data:  # Docker volume for PostgreSQL data

# networks:
#   my_network:  # Custom Docker network



# docker-compose.yml

version: '3.8'

services:
  traefik:
    image: traefik:v2.5
    container_name: "reverse-proxy"
    ports:
      - "80:80"    # Expose Traefik on port 80
      - "8080:8080"  # Expose Traefik dashboard
      - "443:443"
    volumes:
      # Add Docker as a mounted volume, so that Traefik can read the labels of other services
      - /var/run/docker.sock:/var/run/docker.sock 
      # Mount the dynamic configuration
      - ./data/traefik.yml:/etc/traefik/dynamic/traefik.yml
      # Mount the directory containing the certs
      - ./certs:/etc/certs/
    command:
      - "--api.insecure=true"  # Enable insecure API (for demonstration purposes)
      - "--providers.docker=true"  # Enable Docker provider
      - "--providers.docker.exposedbydefault=false"  # Do not expose containers by default
      - "--entrypoints.web.address=:80"  # Define web entry point
      - "--entrypoints.websecure.address=:443"  # Define web secure entry point
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"  # Enable ACME HTTP challenge
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"  # Use web entry point for ACME challenge
    labels:
      # Enable Traefik for this service
      - "traefik.enable=true"

      # Define entrypoint
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{any:.+}`)"  # Catch-all rule for HTTP traffic
      - "traefik.http.routers.http-catchall.entrypoints=web"  # Use the 'web' entrypoint for HTTP traffic

      # Define middleware
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"  # Redirect HTTP to HTTPS

      # Define HTTPS
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"  # Apply redirect middleware for HTTP traffic
      - "traefik.http.routers.http-catchall-secure.rule=HostRegexp(`{any:.+}`)"  # Catch-all rule for HTTPS traffic
      - "traefik.http.routers.http-catchall-secure.entrypoints=websecure"  # Use the 'websecure' entrypoint for HTTPS traffic



      - "traefik.http.routers.traefik.rule=Host(`localhost`)"  # 127.0.0.1 traefik.example.com /Define a router rule for Traefik dashboard
      - "traefik.http.routers.traefik.service=api@internal"  # Use internal Traefik API service for Traefik dashboard

    networks:
      # Use the public network created to be shared between Traefik and
      # any other service that needs to be publicly available with HTTPS
      - reverse-proxy-public


  user-service:
    container_name: "user-service"
    build:
      context: ./user-service
    ports:
      - "5000:8082"  # Expose port 8082 for order service
    networks:
      - reverse-proxy-public

    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.user-service.rule=Host(`user-service.localhost`)"  # Define a router rule for service1
      - "traefik.http.services.service1.loadbalancer.server.port=5000"  # Define service1 port
      - "traefik.http.routers.user-service.tls=true"



  auth-service:
    container_name: "auth-service"
    build:
      context: ./auth-service
    ports:
      - "5001:8082"  # Expose port 8082 for order service
    networks:
      - reverse-proxy-public  
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth-service.rule=Host(`auth-service.localhost`)"  # Define a router rule for service2
      - "traefik.http.services.service2.loadbalancer.server.port=5001" 
      - "traefik.http.routers.user-service.tls=true"

