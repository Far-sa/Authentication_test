version: '3.8'

services:
  traefik:
    image: traefik:v2.5
    container_name: "reverse-proxy"
    ports:
      - "80:80"    # Expose Traefik on port 80
      - "8080:8080"  # Expose Traefik dashboard
      - "443:443"
    volumes:
      # Add Docker as a mounted volume, so that Traefik can read the labels of other services
      - /var/run/docker.sock:/var/run/docker.sock 
      # Mount the dynamic configuration
      - ./data/traefik.yml:/etc/traefik/dynamic/traefik.yml
      # Mount the directory containing the certs
      - ./certs:/etc/certs/
    command:
      - "--api.insecure=true"  # Enable insecure API (for demonstration purposes)
      - "--providers.docker=true"  # Enable Docker provider
      - "--providers.docker.exposedbydefault=false"  # Do not expose containers by default
      - "--entrypoints.web.address=:80"  # Define web entry point
      - "--entrypoints.websecure.address=:443"  # Define web secure entry point
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"  # Enable ACME HTTP challenge
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"  # Use web entry point for ACME challenge
    labels:
      # Enable Traefik for this service
      - "traefik.enable=true"

      # Define entrypoint
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{any:.+}`)"  # Catch-all rule for HTTP traffic
      - "traefik.http.routers.http-catchall.entrypoints=web"  # Use the 'web' entrypoint for HTTP traffic

      # Define middleware
      # - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"  # Redirect HTTP to HTTPS

      # Define HTTPS
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"  # Apply redirect middleware for HTTP traffic
      - "traefik.http.routers.http-catchall-secure.rule=HostRegexp(`{any:.+}`)"  # Catch-all rule for HTTPS traffic
      - "traefik.http.routers.http-catchall-secure.entrypoints=websecure"  # Use the 'websecure' entrypoint for HTTPS traffic



      - "traefik.http.routers.traefik.rule=Host(`localhost`)"  # 127.0.0.1 traefik.example.com /Define a router rule for Traefik dashboard
      - "traefik.http.routers.traefik.service=api@internal"  # Use internal Traefik API service for Traefik dashboard

    # networks:
    #   # Use the public network created to be shared between Traefik and
    #   # any other service that needs to be publicly available with HTTPS
    #   - reverse-proxy-public


  user-service:
    image: user-service:1.1.1
    container_name: "user-service"
    # build:
    #   context: ./user-service
    ports:
      - "5000:8082"  # Expose port 8082 for order service
    networks:
      - microservices_network
    depends_on:
      - mysql
      - rabbitmq

    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.user-service.rule=Host(`user-service.localhost`)"  # Define a router rule for service1
      - "traefik.http.services.service1.loadbalancer.server.port=5000"  # Define service1 port
      - "traefik.http.routers.user-service.tls=true"

  auth-service:
    image: auth-service:1.1.1
    container_name: "auth-service"
    # build:
    #   context: ./auth-service
    ports:
      - "5001:8082"  # Expose port 8082 for order service
    networks:
      - microservices_network
    depends_on:
      - postgresql
      - rabbitmq
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth-service.rule=Host(`auth-service.localhost`)"  # Define a router rule for service2
      - "traefik.http.services.service2.loadbalancer.server.port=5001" 
      - "traefik.http.routers.user-service.tls=true"

############## Infrastructure auth-svc ################## 
  postgresql:
    image: postgres:12-alpine
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    networks:
      - microservices_network
    volumes:
      - ./data/pgdata:/var/lib/postgresql/data

  
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: rabbitmq
    ports:
      - "5672:5672"  # RabbitMQ default port
      - "15672:15672"  # RabbitMQ management plugin
    networks:
      - microservices_network
    environment:
      RABBITMQ_DEFAULT_USER: puppet
      RABBITMQ_DEFAULT_PASS: password
      RABBITMQ_HOST: localhost
      RABBITMQ_VHOST: "users"

    volumes:
      - ./data/rabbitmq-data:/var/lib/rabbitmq

############## Infrastructure user-svc  ################## 
  mysql:
    image: mysql:8.0
    container_name: mysql_app
    restart: always
    ports:
      - "3306:3306"  # MySQL default port
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_HOST: ${MYSQL_HOST}
    volumes:
      - ./data/mysql/app_data:/var/lib/mysql
      #- dbdata:/var/lib/mysql
  
networks:
  microservices_network:
#   prometheus:
#     image: prom/prometheus
#     restart: always
#     volumes:
#       - ./data/metrics/prometheus:/etc/prometheus/
#       - prometheus_data:/prometheus
#     command:
#       - '--config.file=/etc/prometheus/prometheus.yml'
#       - '--storage.tsdb.path=/prometheus'
#       - '--web.console.libraries=/usr/share/prometheus/console_libraries'
#       - '--web.console.templates=/usr/share/prometheus/consoles'
#     ports:
#       - 9090:9090
#     links:
#       - cadvisor:cadvisor
#       - alertmanager:alertmanager
#     depends_on:
#       - cadvisor

#   node-exporter:
#     image: prom/node-exporter
#     volumes:
#       - /proc:/host/proc:ro
#       - /sys:/host/sys:ro
#       - /:/rootfs:ro
#     command:
#       - '--path.procfs=/host/proc'
#       - '--path.sysfs=/host/sys'
#       - --collector.filesystem.ignored-mount-points
#       - '^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)'
#     ports:
#       - 9100:9100
#     restart: always
#     deploy:
#       mode: global

#   alertmanager:
#     image: prom/alertmanager
#     restart: always
#     ports:
#       - 9093:9093
#     volumes:
#       - ./data/metrics/alertmanager/:/etc/alertmanager/
#     command:
#       - '--config.file=/etc/alertmanager/config.yml'
#       - '--storage.path=/alertmanager'

#   cadvisor:
#     image: gcr.io/cadvisor/cadvisor
#     volumes:
#       - /:/rootfs:ro
#       - /var/run:/var/run:rw
#       - /sys:/sys:ro
#       - /var/lib/docker/:/var/lib/docker:ro
#     ports:
#       - 8080:8080
#     restart: always
#     deploy:
#       mode: global

#   grafana:
#     image: grafana/grafana
#     user: '472'
#     restart: always
#     environment:
#       GF_INSTALL_PLUGINS: 'grafana-clock-panel,grafana-simple-json-datasource'
#     volumes:
#       - grafana_data:/var/lib/grafana
#       - ./data/metrics/grafana/provisioning/:/etc/grafana/provisioning/
#     env_file:
#       - ./infrastructure/prometheus-grafana/grafana/config.monitoring
#     ports:
#       - 3000:3000
#     depends_on:
#       - prometheus

# volumes:
#   prometheus_data: {}
#   grafana_data: {}

# networks:
#   reverse-proxy-public:
#     external: true


